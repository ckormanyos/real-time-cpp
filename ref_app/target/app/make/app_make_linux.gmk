# ------------------------------------------------------------------------------
#
# Makefile
#
# Build file for the ref_app application using the GNU tools
#
# Based on GNU Make 3.81
#
# 07-April-2010
#
# ------------------------------------------------------------------------------

# generate more efficient code. GCC > 4.8
USE_LTO = yes
# generate small code, but slower
OPTMIZE_SIZE = yes
# store intermediate files: preprocessor output and assembler files
SAVE_INTERMEDIATES = no

# ------------------------------------------------------------------------------
# paths
# ------------------------------------------------------------------------------
PATH_APP       = src
PATH_TGT       = target/micros/$(TGT)
PATH_APP_MAKE  = target/app/make
PATH_TGT_MAKE  = $(PATH_TGT)/make
PATH_BIN       = bin
PATH_TMP       = tmp
PATH_OBJ       = $(PATH_TMP)/obj
PATH_SRC       = $(PATH_TMP)/src
PATH_ERR       = $(PATH_TMP)/err


# ------------------------------------------------------------------------------
# include files
# ------------------------------------------------------------------------------
include $(PATH_APP_MAKE)/app_files.gmk      # Application file list
include $(PATH_TGT_MAKE)/$(TGT)_files.gmk   # Target filelist
include $(PATH_TGT_MAKE)/$(TGT)_flags.gmk   # Target compiler flags


# ------------------------------------------------------------------------------
# application
# ------------------------------------------------------------------------------
APP = $(PATH_BIN)/app


# ------------------------------------------------------------------------------
# object files
# ------------------------------------------------------------------------------
FILES_TMP   = $(FILES_CPP) $(FILES_TGT)
FILES_O     = $(addprefix $(PATH_OBJ)/, $(notdir $(addsuffix .o, $(FILES_TMP))))
FILE_LDEF   = $(PATH_TGT_MAKE)/$(TGT).ld
FILES_CRT_O = $(addprefix $(PATH_OBJ)/, $(notdir $(addsuffix .o, $(FILES_CRT))))


# ------------------------------------------------------------------------------
# VPATH definition
#
# VPATH is required for the maker to find the C-/ASM-Source files.
# Extract the directory/module names from the file list with the dir
# command and remove the duplicated directory names with the sort command.
# FILES_PRJ is listed first to make sure that the source files in the project
# directory are searched first.
# ------------------------------------------------------------------------------
VPATH := $(sort $(dir $(FILES_TMP)))


# ------------------------------------------------------------------------------
# Development tools
# ------------------------------------------------------------------------------
AR        = $(GCC_TARGET)-ar
CL        = $(GCC_TARGET)-g++
CC        = $(GCC_TARGET)-gcc
CXX       = $(GCC_TARGET)-g++
OBJDUMP   = $(GCC_TARGET)-objdump
OBJCOPY   = $(GCC_TARGET)-objcopy
NM        = $(GCC_TARGET)-nm
CPPFILT   = $(GCC_TARGET)-c++filt
READELF   = $(GCC_TARGET)-readelf
SIZE      = $(GCC_TARGET)-size
ECHO      = echo
MAKE      = make
MKDIR     = mkdir
SED       = sed
RMDIR     = rm -rf
RM        = rm

# ------------------------------------------------------------------------------
# Tool parameters
# ------------------------------------------------------------------------------
# common inlcude directories
C_INCLUDES = -I$(PATH_APP) -I$(PATH_APP)/mcal/$(TGT)

# Common flags for C and C++
GCCFLAGS   = -Wall -Wextra -pedantic -gdwarf-2 \
             -fno-use-cxa-atexit -fno-exceptions -fno-enforce-eh-specs \
             -finline-functions -finline-limit=64 $(OPTIMIZE_SIZE_CFLAGS) \
             $(LTO_CFLAGS)

# C-Compiler flags only (gcc)!
CFLAGS     = $(GCCFLAGS) $(TGT_CFLAGS)

# C++-Compiler flags only (g++)!
CXXFLAGS   = $(GCCFLAGS) $(TGT_CFLAGS) $(TGT_CXXFLAGS) -fno-rtti -fno-nonansi-builtins \
             -fno-threadsafe-statics -fno-enforce-eh-specs

# Assembler flags
ASFLAGS    = $(TGT_MMCU) -x assembler-with-cpp

# Preprocessor flags only (used in C and C++)
CPPFLAGS   = $(C_INCLUDES) $(TGT_CPPFLAGS) $(DEFINES)

# linker flags (if LTO should be used all CFLAGS must be provided here too)
LDFLAGS    = -x none -nostartfiles -nostdlib -Wl,--relax -Wl,--gc-sections \
             $(LTO_LDFLAGS) $(OPTIMIZE_SIZE_LDFLAGS) $(TGT_LDFLAGS)

# flags for LST file generation
GEN_LST_CXXFLAGS = -Wa,-adhlns=$(patsubst %.cpp,$(PATH_SRC)/%.lst,$(notdir $<))
GEN_LST_CFLAGS = -Wa,-adhlns=$(patsubst %.c,$(PATH_SRC)/%.lst,$(notdir $<))
GEN_LST_ASFLAGS = -Wa,-adhlns=$(patsubst %.s,$(PATH_SRC)/%.lst,$(notdir $<)),-gstabs,--listing-cont-lines=100

# flags for dependency file generaton
GEN_DEP_FLAGS = -MMD -MP -MF $(PATH_OBJ)/$(@F:.o=.d)

SAVE_ERR = 2>&1 | tee $(PATH_ERR)/$(@F:.o=.err)

# lto is available for most platforms using gcc.
LTO_CFLAGS =
LTO_LDFLAGS =
ifeq ($(USE_LTO), yes)
LTO_CFLAGS = -flto
LTO_LDFLAGS = -flto $(CFLAGS)
endif

# remove unused sections, available for all nearly platforms using gcc
ifeq ($(OPTMIZE_SIZE), yes)
OPTIMIZE_SIZE_CFLAGS += -ffunction-sections -fdata-sections
OPTIMIZE_SIZE_LDFLAGS += -Wl,--gc-sections
# if gc is enabled some symbols must be guarded by 'used'
# attribute. Otherwise they will be removed without a
# notice. sys_start::main() is a candidate for 'used' attribute.
DEFINES += -DDO_NOT_GC_THIS="__attribute__((used))"
else
DEFINES += -DDO_NOT_GC_THIS
endif

ifeq ($(SAVE_INTERMEDIATES), yes)
GCCFLAGS += -save-temps=obj
endif

# ------------------------------------------------------------------------------
# Main-Dependencies (app: all)
# ------------------------------------------------------------------------------
.PHONY: all
all: mkdirs $(APP)_flash.hex $(APP)_nm.txt

.PHONY: mkdirs
mkdirs:
	@-$(MKDIR) -p $(PATH_BIN)
	@-$(MKDIR) -p $(PATH_OBJ)
	@-$(MKDIR) -p $(PATH_ERR)
	@-$(MKDIR) -p $(PATH_SRC)


# ------------------------------------------------------------------------------
# Main-Dependencies (app: rebuild)
# ------------------------------------------------------------------------------
.PHONY: rebuild
rebuild: clean_all all


# ------------------------------------------------------------------------------
# clean project
# ------------------------------------------------------------------------------
.PHONY: clean_prj
clean_prj:
	$(RMDIR) $(PATH_BIN)

.PHONY: clean
clean:
	$(RMDIR) $(PATH_OBJ) $(PATH_ERR) $(PATH_SRC)

# ------------------------------------------------------------------------------
# clean all
# ------------------------------------------------------------------------------
.PHONY: clean_all
clean_all: clean_prj clean


# ------------------------------------------------------------------------------
# print the GNUmake version and the compiler version
# ------------------------------------------------------------------------------
.PHONY: version
version:
  # Print the GNU make version and the compiler version
	@$(ECHO) GNUmake version...
	@$(MAKE) --version
	@$(ECHO) GCC version...
	@$(CC) -v


# ------------------------------------------------------------------------------
# link/locate application
# ------------------------------------------------------------------------------
$(APP).elf : $(FILE_LDEF) $(FILES_O)
	@-$(ECHO) +++ linking application: $(APP).elf
	$(CC) $(LDFLAGS) $(FILES_O) -Wl,-T$(FILE_LDEF),-Map,$(APP).map$(LFLAGS_WL) \
	-o $(APP).elf 2>&1 | tee $(APP).elf.err


# ------------------------------------------------------------------------------
# parse object files for symbols
# ------------------------------------------------------------------------------
$(APP)_nm.txt : $(APP).elf
	@-$(ECHO) +++ parsing symbols with nm: $(APP)_nm.txt
	$(NM) --numeric-sort --print-size $(APP).elf > $(APP)_nm.txt
	@-$(ECHO) +++ demangling symbols with nm -C: $(APP)_cppfilt.txt
	$(NM) -C --numeric-sort --print-size $(APP).elf > $(APP)_cppfilt.txt
	@-$(ECHO) +++ parsing symbols with readelf: $(APP)_readelf.txt
	$(READELF) --syms $(APP).elf > $(APP)_readelf.txt
	@-$(ECHO) +++ creating size summary table with size: $(APP)_size.txt
	$(SIZE) -A -t $(APP).elf > $(APP)_size.txt


# ------------------------------------------------------------------------------
# create hex mask
# ------------------------------------------------------------------------------
$(APP)_flash.hex : $(APP).elf
	@-$(ECHO) +++ creating hex module: $(APP)_flash.hex
	$(OBJCOPY) -O ihex $(APP).elf $(APP).hex
	$(OBJCOPY) -S -O binary $(APP).elf $(APP).bin


# ------------------------------------------------------------------------------
# Dependencyfile include (build)
#
# Include all dependency (*.d) files generated previously from the compiler.
# If the files do not exist then the includes will be ignored.
# ------------------------------------------------------------------------------
ifneq ($(MAKECMDGOALS),rebuild)
-include $(FILES_O:.o=.d)       # for example Tmp/obj/SysStart.d, Tmp/obj/Hal.d, etc
endif


# ------------------------------------------------------------------------------
# include rules
# ------------------------------------------------------------------------------
include $(PATH_APP_MAKE)/app_rules_linux.gmk
